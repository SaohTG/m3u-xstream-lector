version: "3.9"

services:
  db:
    image: postgres:15
    container_name: iptv-saas-db
    environment:
      POSTGRES_USER: iptv
      POSTGRES_PASSWORD: iptv
      POSTGRES_DB: iptvapp
    volumes:
      - db_data:/var/lib/postgresql/data
    # Si tu veux rendre Postgres accessible depuis l'hôte, décommente la ligne ci-dessous
    # ports:
    #   - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iptv -d iptvapp"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api:
    container_name: iptv-saas-api
    build:
      context: ./backend
      args:
        API_BUILD_ID: "18"            # ↩ augmente ce nombre pour forcer un rebuild (cache bust)
    environment:
      DATABASE_URL: postgres://iptv:iptv@db:5432/iptvapp
      JWT_SECRET: supersecret_change_me
      TMDB_API_KEY: "d8175301037c00f3c719478998396539"
      API_PORT: "4000"
      NODE_ENV: production
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "4000:4000"
    restart: unless-stopped

  web:
    container_name: iptv-saas-web
    build:
      context: ./web
      args:
        VITE_API_URL: "/api"          # le front appelle /api → nginx proxy vers api:4000
        BUILD_ID: "21"                # ↩ augmente pour forcer un rebuild (cache bust)
    depends_on:
      api:
        condition: service_started
    ports:
      - "8080:80"
    restart: unless-stopped

volumes:
  db_data:

networks:
  default:
    name: iptv-saas-net

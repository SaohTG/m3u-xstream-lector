version: "3.8"

services:
  db:
    image: postgres:15-alpine
    container_name: iptv-saas-db
    environment:
      POSTGRES_USER: iptv
      POSTGRES_PASSWORD: iptv
      POSTGRES_DB: iptv
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iptv -d iptv || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: iptv-saas-redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  api:
    build:
      context: ./packages/api
    container_name: iptv-saas-api
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      # ✅ Ton secret JWT (garde bien les quotes !)
      JWT_SECRET: '6#mVB0LwG26uQ8|tGyP:'
      # TypeORM / DB
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: iptv
      DB_USER: iptv
      DB_PASSWORD: iptv
      DATABASE_URL: postgres://iptv:iptv@db:5432/iptv
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # (ajoute ici d’autres vars si ton AppModule les lit)
    ports:
      - "3000:3000"
    restart: unless-stopped

  web:
    build:
      context: ./packages/web
    container_name: iptv-saas-web
    depends_on:
      - api
    environment:
      # Le front doit appeler l’API publique
      VITE_API_BASE: "http://85.31.239.110:3000"
    ports:
      - "5173:5173"
    restart: unless-stopped

volumes:
  db_data:
  redis_data:

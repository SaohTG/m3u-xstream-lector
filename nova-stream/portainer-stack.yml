version: '3.8'

# This stack is intended for deployment via Portainer.
# It assumes you have already built and pushed the Docker images to a container registry.
# You must configure the following stack environment variables in Portainer:
# - ORG: Your container registry organization (e.g., your GitHub username).
# - CR_PAT: A read-only token for your container registry if it's private.
# - POSTGRES_PASSWORD: The password for the PostgreSQL database.
# - DOMAIN: The domain where this stack is hosted, e.g., 'novastream.example.com'.

services:
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: novastream
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - novastream-data:/var/lib/postgresql/data
    networks:
      - novastream-net

  api:
    image: ghcr.io/${ORG}/novastream-api:latest
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=4000
      - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD}@db:5432/novastream
      - CORS_ORIGIN=https://${DOMAIN}
      - REQUEST_TIMEOUT_MS=20000
      - DEFAULT_USER_AGENT=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/120 Safari/537.36
    depends_on:
      - db
    networks:
      - novastream-net
    # For production, you would typically use a reverse proxy like Traefik or Nginx
    # to expose the API, not expose the port directly.
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.novastream-api.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
    #   - "traefik.http.services.novastream-api.loadbalancer.server.port=4000"

  web:
    image: ghcr.io/${ORG}/novastream-web:latest
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=https://${DOMAIN}/api
    depends_on:
      - api
    networks:
      - novastream-net
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.novastream-web.rule=Host(`${DOMAIN}`)"
    #   - "traefik.http.services.novastream-web.loadbalancer.server.port=3000"

volumes:
  novastream-data:

networks:
  novastream-net:
    driver: bridge
